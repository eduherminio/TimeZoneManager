import * as React from 'react';
import { Route, RouteProps, Redirect } from 'react-router';
import { ApplicationState } from '../store';
import { SessionSelector } from '../selectors/sessionSelector';
import { PermissionName } from '../server/autogeneratedclients/TimeZoneManagerClient'
import { connect } from 'react-redux';
import { ExistingPages } from '../ExistingPages';
import { JwtManager } from '../server/JwtManager';
import * as SessionStore from '../store/Session';

interface AuthRouteProps {
    permissions: PermissionName[];
}

interface AuthRouteStoreProps {
    hasPermissions: boolean;
    session: SessionStore.SessionState | undefined;
}

type AuthRouteAllProps = RouteProps & AuthRouteProps & AuthRouteStoreProps;

class AuthRouteInternal extends React.Component<AuthRouteAllProps> {
    private readonly jwtManager = new JwtManager(null);
    public render(): JSX.Element {

        const { component, path, exact, permissions, hasPermissions, ...rest } = this.props;
        if (this.jwtManager.validateToken()) {
            if (hasPermissions) {
                return (<Route exact={true} path={path} component={component} {...rest} />);
            }
            else {
                return (<Redirect to={ExistingPages.logout} push={true} />);
            }
        }
        else {
            return (<Redirect to={ExistingPages.login} push={true} />);
        }
    }
}

function mapStateToProps(state: ApplicationState, props: AuthRouteProps): AuthRouteStoreProps {
    return {
        hasPermissions: SessionSelector.hasPermissions(props.permissions)(state),
        session: state.session
    };
}

export const AuthRoute = connect(mapStateToProps)(AuthRouteInternal);
