import * as React from 'react';
import { connect } from 'react-redux';
import { Redirect, RouteComponentProps } from 'react-router';
import { sha512 } from 'js-sha512';
import { SwaggerException } from '../server/LoginClient'
import * as UsersStore from '../store/Users';
import { ApplicationState } from '../store';
import { Button } from '../formcontrols/Button/Button';
import { TextField, Typography } from '@material-ui/core';
import { ExistingPages } from '../ExistingPages';
import { UserClient } from '../server/autogeneratedclients/TimeZoneManagerClient';
import { FullUserDto, UserDto } from '../server/UserClient';
import './FormStyles.css';

type RegisterProps =
  UsersStore.UsersState // ... state we've requested from the Redux store
  & typeof UsersStore.actionCreators // ... plus action creators we've requested
  & RouteComponentProps<{}>; // ... plus incoming routing parameters

interface RegisterState {
  username?: string;
  password?: string;
  repeatedPassword?: string;
  errorText?: string;
  loading?: boolean;
  redirectToLogin: number;
  errors: {
    username: string,
    password: string,
    repeatedPassword: string
  }
}

class Register extends React.Component<RegisterProps, RegisterState> {

  constructor(props: RegisterProps) {
    super(props);

    this.state = {
      username: '', password: '', repeatedPassword: '', errorText: '', loading: false, redirectToLogin: 0,
      errors: {
        username: '',
        password: '',
        repeatedPassword: ''
      }
    };

    this.handleChange = this.handleChange.bind(this);
    this.submitRegister = this.submitRegister.bind(this);
    this.clearError = this.clearError.bind(this);
    this.redirectToLogin = this.redirectToLogin.bind(this);
    this.isNotReadyToRegister = this.isNotReadyToRegister.bind(this);
  }

  handleChange(e: any): void {
    const { name, value } = e.target;
    this.setState({ ...this.state, [name]: value });

    let errors = this.state.errors;
    switch (name) {
      case 'username': {
        errors.username = value && value.replace(' ', '') === value
          ? ''
          : 'Please select a username (no spaces allowed)'
        break;
      }
      case 'password': {
        errors.password = value ? '' : 'Please select a password'
        errors.repeatedPassword = (value || this.state.repeatedPassword)
          ? (value !== this.state.repeatedPassword ? 'Passwords must match' : '')
          : '';
        break;
      }
      case 'repeatedPassword': {
        errors.repeatedPassword = this.state.password && value !== this.state.password
          ? 'Passwords must match'
          : ''
        break;
      }
    }

    this.setState({ errors: errors });
  }

  private isNotReadyToRegister(): boolean {
    return (this.state.loading ? this.state.loading : false)
      || !this.state.username
      || !this.state.password
      || this.state.errors.username !== ''
      || this.state.errors.password !== ''
      || this.state.errors.repeatedPassword !== '';
  }

  submitRegister(e: any): void {
    if (this.isNotReadyToRegister()) {
      return;
    }
    e.preventDefault();
    this.setState({ loading: true });

    let username = this.state.username
      ? this.state.username
      : '';
    let password: string = this.state.password
      ? sha512(this.state.password)
      : '';

    const client = new UserClient();
    let user: FullUserDto = {
      username: username,
      password: password
    }

    client.register(user)
      .then((user: UserDto) => {
        this.setState({ loading: false });
        this.setState({ redirectToLogin: 1 });
      })
      .catch((error: SwaggerException) => {
        this.setState({
          errorText: error.response && typeof JSON.parse(error.response) === "string"
            ? JSON.parse(error.response)
            : error.response
              ? error.response
              : error.message ? error.message : error.toString(),
          loading: false
        });
      });
  }

  redirectToLogin(e: any): void {
    this.setState({ redirectToLogin: 2 });
  }

  clearError(): void {
    this.setState({ errorText: '' });
  }

  render(): JSX.Element {

    if (this.state.redirectToLogin === 1) {
      return this.renderRegistered();
    }
    else if (this.state.redirectToLogin === 2) {
      this.setState({ redirectToLogin: 0 });
      return this.renderLoginRedirect();
    }
    else {
      return this.renderUnRegistered();
    }
  }

  renderRegistered(): JSX.Element {
    return (
      <div>
        <h6>Successfully registered as {this.state.username}!</h6>
        <div onClick={this.redirectToLogin}>
          <Button
            className={"buttonControl"}
            type={'submit'}
            value={'Redirect to login'}
          />
        </div>
      </div>
    );
  }

  renderLoginRedirect(): JSX.Element {
    return (<Redirect to={ExistingPages.login} push={true} />);
  }

  renderUnRegistered(): JSX.Element {
    return (

      <div className={"loginContainer"}>
        <div className={"panelLogin"}>
          <div>
            <div className={"panelRowHeader"}>
              <Typography className="title" variant={'h4' as const}>{'Register form'}</Typography>
            </div>
            <br />
            <div className={"panelRow"}>
              <TextField
                autoFocus={true}
                className={"inputControl"}
                name={'username'}
                label={'User'}
                value={this.state.username}
                onChange={this.handleChange}
                onFocus={this.clearError}
                autoComplete='username'
              />
            </div>
            <div className={"panelRow"}>
              <TextField
                type={'password'}
                className={"inputControl"}
                name={'password'}
                label={'Password'}
                value={this.state.password}
                onChange={this.handleChange}
                onFocus={this.clearError}
              />
            </div>
            <div className={"panelRow"}>
              <TextField
                type={'password'}
                className={"inputControl"}
                name={'repeatedPassword'}
                label={'repeatedPassword'}
                value={this.state.repeatedPassword}
                onChange={this.handleChange}
                onFocus={this.clearError}
              />
            </div>
            <div className={"panelRow"} onClick={this.submitRegister}>
              <Button
                className={"buttonControl"}
                type={'submit'}
                value={'Register'}
                disabled={this.isNotReadyToRegister()}
              />
            </div>
            <br />
            <div className={"panelRowError"}>
              <ul className="ul">
                <li>{this.state.errors.username}</li>
                <li>{this.state.errors.password}</li>
                <li>{this.state.errors.repeatedPassword}</li>
              </ul>
            </div>
            <div className={"panelRowError"}>
              <span>{this.state.errorText}</span>
            </div>
          </div>
        </div>
      </div>);
  }
}

export default connect(
  (state: ApplicationState) => state.session, // Selects which state properties are merged into the component's props
  UsersStore.actionCreators // Selects which action creators are merged into the component's props
)(Register as any);