import { createSelector } from 'reselect';
import { Selector } from './types';
import { ApplicationState } from '../store';
import { PermissionName} from '../server/autogeneratedclients/TimeZoneManagerClient'
const permissionsState = (state: ApplicationState): string[] => state.session ? state.session.permissions : [];


export class SessionSelector {
    // public static isAdmin: Selector<string[], boolean> = createSelector(
    //     permissionsState,
    //     sessionPermissionName=> SessionSelector.hasAdminPermission(sessionPermissions)
    // );

    public static hasPermissions: (requiredPermissions: PermissionName[]) => Selector<string[], boolean> = (requiredPermissions: PermissionName[]) => {
        return createSelector(
            permissionsState,
            sessionPermissions => SessionSelector.sessionHasRequiredPermissions(requiredPermissions, sessionPermissions)
        );
    }

    private static sessionHasRequiredPermissions(requiredPermissions: PermissionName[], sessionPermissions: string[]): boolean {
      return SessionSelector.allPermissionsMatch(requiredPermissions, sessionPermissions);
      // || SessionSelector.hasAdminPermission(sessionPermissions)
    }

    private static allPermissionsMatch(requiredPermissions: PermissionName[], sessionPermissions: string[]): boolean {
        let somePermissionNotFound: boolean = requiredPermissions.some(permission => sessionPermissions.indexOf(permission.toString()) === -1);
        return !somePermissionNotFound;
    }

    // private static hasAdminPermission(sessionPermissions: string[]): boolean {
    //     return sessionPermissions.indexOf(Permissions.AdminPermissiontoString()) !== -1;
    // }
}
