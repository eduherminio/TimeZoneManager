using AutoMapper;
using System.Linq;
using TimeZoneManager.Dao;
using TimeZoneManager.Dto;
using TimeZoneManager.Extensions;
using TimeZoneManager.Model;

namespace TimeZoneManager.MappingProfiles
{
    public class UserProfile : BaseMapperProfile
    {
        // The Ignore option is only needed for fields that appear both in DTO and Entity and we don't want them to be mapped because they are relationships
        // However, clauses involving many-to-many join entities (RoleInUsers, etc.) have been added to prevent a future crash if someday those fields are added to DTOs

        public UserProfile()
        {
            // Entity --> DTO
            CreateMap<User, UserDto>();

            CreateMap<User, FullUserDto>()
                .IncludeBase<User, UserDto>();

            // DTO --> Entity
            CreateMap<UserDto, User>()
                .ForMember(destination => destination.Roles, opt => opt.Ignore())
                .ForMember(destination => destination.RoleInUsers, opt => opt.Ignore())
                .ForMember(destination => destination.Password, opt => opt.Ignore())
                .ConstructUsing(_ => new User())
                .AfterMap<TrackUserAction>();

            CreateMap<FullUserDto, User>()
                .IncludeBase<UserDto, User>()
                .ForMember(destination => destination.Password, opt => opt.MapFrom(dto => dto.Password))
                .ConstructUsing(_ => new User());

            // UserDTO --> FullUserDTO
            CreateMap<UserDto, FullUserDto>()
                .ForMember(destination => destination.Password, opt => opt.Ignore());
        }
    }

    public class TrackUserAction : IMappingAction<UserDto, User>
    {
        private readonly IRoleDao _roleDao;

        public TrackUserAction(IRoleDao roleDao)
        {
            _roleDao = roleDao;
        }

        public void Process(UserDto source, User destination, ResolutionContext _)
        {
            TrackRoles(source, destination);
        }

        private void TrackRoles(UserDto source, User destination)
        {
            if (destination.Id != default)
            {
                destination.Roles.RemoveAll(role => !source.Roles.Any(roleDTO => roleDTO.Key == role.AutoGeneratedKey));
            }

            var newRoleKeys = source.Roles
                .Where(role => !string.IsNullOrWhiteSpace(role.Key) && !destination.Roles.Any(roleInDb => role.Key == roleInDb.AutoGeneratedKey))
                .Select(role => role.Key)
                .ToList();

            destination.Roles.AddRange(_roleDao.Load(newRoleKeys));
        }
    }
}
