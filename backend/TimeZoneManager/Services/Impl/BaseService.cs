using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using TimeZoneManager.Dto;
using TimeZoneManager.Exceptions;
using TimeZoneManager.Logs;
using TimeZoneManager.Orm;
using TimeZoneManager.Orm.Dao;
using TimeZoneManager.Orm.Model;

namespace TimeZoneManager.Services.Impl
{
    [Log]
    [ExceptionManagement]
    public abstract class BaseEntityService<TEntity, TEntityDto, TEntityDao>
        where TEntity : Entity, IAutoGeneratedKey
        where TEntityDto : IEntityDto
        where TEntityDao : IDao<TEntity>
    {
        protected readonly TEntityDao _entityDao;
        protected readonly IMapper _mapper;

        protected BaseEntityService(TEntityDao entityDao, IMapper mapper)
        {
            _entityDao = entityDao;
            _mapper = mapper;
        }

        #region Create

        [TransactionInterceptor]
        public virtual TEntityDto Create(TEntityDto dto)
        {
            CreateValidationActions(dto);
            TEntity entity = _mapper.Map<TEntity>(dto);
            return CreateActions(entity, dto);
        }

        [TransactionInterceptor]
        public virtual ICollection<TEntityDto> Create(ICollection<TEntityDto> dtos)
        {
            var entities = new List<TEntity>();
            foreach (TEntityDto dto in dtos)
            {
                CreateValidationActions(dto);
                TEntity entity = _mapper.Map<TEntity>(dto);
                entities.Add(entity);
            }
            return CreateActions(entities, dtos);
        }

        protected virtual void CreateValidationActions(TEntityDto dto)
        {
            if (!IsValid(dto))
            {
                throw new InvalidDataException();
            }
            if (_entityDao.Any(EntityAlreadyExistsToCreateCondition(dto)))
            {
                throw new EntityAlreadyExistsException();
            }
        }

        protected virtual TEntityDto CreateActions(TEntity entity, TEntityDto dto)
        {
            TEntity entityCreated = _entityDao.Create(entity);
            return _mapper.Map<TEntityDto>(entityCreated);
        }

        protected virtual ICollection<TEntityDto> CreateActions(ICollection<TEntity> entities,
            ICollection<TEntityDto> dtos)
        {
            ICollection<TEntity> created = _entityDao.Create(entities);
            return _mapper.Map<ICollection<TEntityDto>>(created);
        }

        #endregion

        #region Load

        public virtual TEntityDto Load(string key)
        {
            TEntity entity = LoadEntity(key);
            return _mapper.Map<TEntityDto>(entity);
        }

        public virtual ICollection<TEntityDto> LoadAll()
        {
            return _entityDao.LoadAll()
                .Select(l => _mapper.Map<TEntityDto>(l))
                .ToList();
        }

        #endregion

        #region Update

        [TransactionInterceptor]
        public virtual TEntityDto Update(TEntityDto dto)
        {
            TEntity entity = UpdateValidationActions(dto);
            entity = _mapper.Map(dto, entity);
            return UpdateActions(entity, dto);
        }

        protected virtual TEntity UpdateValidationActions(TEntityDto dto)
        {
            if (!IsValid(dto))
            {
                throw new InvalidDataException();
            }
            if (_entityDao.Any(EntityAlreadyExistsToUpdateCondition(dto)))
            {
                throw new EntityAlreadyExistsException();
            }

            return LoadEntity(dto.Key);
        }

        protected virtual TEntityDto UpdateActions(TEntity entity, TEntityDto dto)
        {
            TEntity updatedEntity = _entityDao.Update(entity);
            return _mapper.Map<TEntityDto>(updatedEntity);
        }

        #endregion

        #region Delete

        [TransactionInterceptor]
        public virtual void Delete(string key)
        {
            _entityDao.Delete(key);
        }

        [TransactionInterceptor]
        public virtual void Delete(ICollection<string> listkey)
        {
            _entityDao.Delete(listkey);
        }

        #endregion

        #region Abstract methods

        /// <summary>
        /// Returns if entity to create or update is valid
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        protected abstract bool IsValid(TEntityDto dto);

        #endregion

        #region Protected methods

        protected virtual Expression<Func<TEntity, bool>> EntityAlreadyExistsToCreateCondition(TEntityDto dto)
        {
            return EntityAlreadyExistsCondition(dto);
        }

        protected virtual Expression<Func<TEntity, bool>> EntityAlreadyExistsToUpdateCondition(TEntityDto dto)
        {
            return (_) => false;
        }

        /// <summary>
        /// Condition to determine if an entity already exists
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        protected virtual Expression<Func<TEntity, bool>> EntityAlreadyExistsCondition(TEntityDto dto)
        {
            return entity => entity.AutoGeneratedKey == dto.Key;
        }

        #endregion

        #region Private methods

        protected TEntity LoadEntity(string key)
        {
            TEntity entity = _entityDao.Load(key);
            if (entity == null)
            {
                throw new EntityDoesNotExistException();
            }
            return entity;
        }

        #endregion
    }
}
