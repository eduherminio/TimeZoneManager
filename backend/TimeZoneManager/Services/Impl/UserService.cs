using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using TimeZoneManager.Authorization;
using TimeZoneManager.Constants;
using TimeZoneManager.Dao;
using TimeZoneManager.Dto;
using TimeZoneManager.Exceptions;
using TimeZoneManager.Model;
using TimeZoneManager.Orm;

namespace TimeZoneManager.Services.Impl
{
    public class UserService
        : BaseEntityService<User, UserDto, IUserDao>, IUserService
    {
        private readonly IRoleDao _roleDao;

        public UserService(IUserDao entityDao, IRoleDao roleDao, IMapper mapper)
            : base(entityDao, mapper)
        {
            _roleDao = roleDao;
        }

        public override UserDto Create(UserDto _)
        {
            throw new InvalidOperationException("Use Create(FullUserDto) method");
        }

        protected override bool IsValid(UserDto dto)
        {
            return !string.IsNullOrWhiteSpace(dto.Username);
        }

        [TransactionInterceptor]
        public UserDto Create(FullUserDto user)
        {
            if (!IsValid(user))
            {
                throw new InvalidDataException();
            }

            if (_entityDao.FindByUsername(user.Username) != null)
            {
                throw new EntityAlreadyExistsException($"An entity with username {user.Username} already exists in the system");
            }

            user.Key = null;
            user.Roles = user.Roles.Where(r => r.Name != nameof(RoleName.Unknown)).ToList();
            User entity = _mapper.Map<User>(user);
            User createdUser = _entityDao.Create(entity);

            return _mapper.Map<UserDto>(createdUser);
        }

        [TransactionInterceptor]
        public UserDto Register(FullUserDto user)
        {
            user.Roles.Clear();
            user.Roles.Add(new RoleDto { Key = _roleDao.FindByName(nameof(RoleName.User))?.AutoGeneratedKey });
            return Create(user);
        }

        public ICollection<UserDto> FindByName(string username)
        {
            var candidateUsers = _entityDao.LoadAll();

            var usersToReturn = string.IsNullOrWhiteSpace(username) || username == "*"
                ? candidateUsers
                : candidateUsers.Where(user => user.Username.Contains(username));

            return usersToReturn
                .Select(user => _mapper.Map<UserDto>(user))
                .ToList();
        }

        private static bool IsValid(FullUserDto dto)
        {
            return !string.IsNullOrWhiteSpace(dto.Username)
                && !string.IsNullOrWhiteSpace(dto.Password);
        }

        #region Initialize

        public void Initialize()
        {
            ICollection<string> existingUsernames =
                _entityDao.FindByUsername(DefaultUsers.AllUserList.Select(p => p.Username).ToList())
                .Select(loadedUser => loadedUser.Username).ToList();

            var usersToCreate = DefaultUsers.AllUserList
                .Where(contantUser => !existingUsernames.Contains(contantUser.Username));

            var loadedRoles = new Dictionary<string, Role>();

            foreach (var r in usersToCreate.SelectMany(r => r.Roles))
            {
                if (!loadedRoles.TryGetValue(r.Name, out var existingRole))
                {
                    existingRole = _roleDao.FindByName(r.Name);
                    loadedRoles.Add(existingRole.Name, existingRole);

                    r.Key = existingRole?.AutoGeneratedKey;
                }
            }

            usersToCreate
                .ToList()
                .ForEach(user => Create(user));
        }

        #endregion
    }
}
