using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using TimeZoneManager.Authorization;
using TimeZoneManager.Constants;
using TimeZoneManager.Dao;
using TimeZoneManager.Dto;
using TimeZoneManager.Exceptions;
using TimeZoneManager.Model;

namespace TimeZoneManager.Services.Impl
{
    public class RoleService
        : BaseEntityService<Role, RoleDto, IRoleDao>, IRoleService
    {
        private readonly IPermissionDao _permissionDao;

        public RoleService(IRoleDao entityDao, IPermissionDao permissionDao, IMapper mapper)
            : base(entityDao, mapper)
        {
            _permissionDao = permissionDao;
        }

        protected override bool IsValid(RoleDto dto)
        {
            return !string.IsNullOrWhiteSpace(dto.Name)
                && !dto.Permissions.Any(p => p.Name == AdminPermissions.SuperAdminPermissionName);
        }

        protected override Role UpdateValidationActions(RoleDto dto)
        {
            Role role = base.UpdateValidationActions(dto);

            if ((dto.Key == role.AutoGeneratedKey && dto.Name != role.Name)
                || (dto.Key != role.AutoGeneratedKey && dto.Name == role.Name))
            {
                throw new InternalErrorException("Role names cannot be updated");
            }

            return role;
        }

        #region Initialize

        public void Initialize()
        {
            ICollection<string> existingRoleNames =
                _entityDao.FindByName(DefaultRoles.AllRoleList.Select(p => p.Name).ToList())
                .Select(loadedRole => loadedRole.Name).ToList();

            var rolesToCreate = DefaultRoles.AllRoleList
                .Where(contantRole => !existingRoleNames.Contains(contantRole.Name));

            var loadedPermissions = new Dictionary<string, Permission>();

            foreach (var p in rolesToCreate.SelectMany(r => r.Permissions))
            {
                if (!loadedPermissions.TryGetValue(p.Name, out var existingPermission))
                {
                    existingPermission = _permissionDao.FindByName(p.Name);
                    loadedPermissions.Add(existingPermission.Name, existingPermission);

                    p.Key = existingPermission?.AutoGeneratedKey;
                }
            }

            Create(rolesToCreate.ToList());

            #endregion
        }
    }
}
