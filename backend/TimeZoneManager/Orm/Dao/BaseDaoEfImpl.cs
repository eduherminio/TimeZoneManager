using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using TimeZoneManager.Exceptions;
using TimeZoneManager.Orm.Model;

namespace TimeZoneManager.Orm.Dao
{
    /// <summary>
    /// EF Core implementation of IDao.
    /// </summary>
    /// <remarks>
    /// Uses QueryTemplate + KeyCondition to execute queries in DB when possible
    /// </remarks>
    /// <typeparam name="TEntity"></typeparam>
    public abstract class BaseDaoEfImpl<TEntity>
        : IDao<TEntity> where TEntity : Entity
    {
        protected DbContext Context { get; set; }

        protected BaseDaoEfImpl(IDatabaseContextContainer contextContainer)
        {
            Context = contextContainer.Context;
        }

        public virtual TEntity Create(TEntity entity)
        {
            CreateKey(entity);
            Context.Add(entity);
            SaveChanges();
            return entity;
        }

        public virtual ICollection<TEntity> Create(ICollection<TEntity> entities)
        {
            foreach (var entity in entities)
            {
                CreateKey(entity);
                Context.Add(entity);
            }
            SaveChanges();
            return entities;
        }

        public virtual TEntity Update(TEntity entity)
        {
            BeforeUpdateEntity(entity);
            SaveChanges();
            return entity;
        }

        public virtual void Delete(string key)
        {
            TEntity entity = Load(key);

            if (entity == null)
            {
                throw new EntityDoesNotExistException("Trying to delete a non existing entity");
            }

            Delete(entity);
        }

        public virtual void Delete(TEntity entity)
        {
            Context.Remove(entity);
            SaveChanges();
        }

        public virtual void Delete(ICollection<string> keyList)
        {
            Context.RemoveRange(keyList.Select(Load).ToList());
            SaveChanges();
        }

        public virtual ICollection<TEntity> LoadAll()
        {
            return new List<TEntity>(QueryTemplate());
        }

        public virtual TEntity Load(string key)
        {
            return QueryTemplate()
                .SingleOrDefault(KeyCondition(key));
        }

        public virtual ICollection<TEntity> Load(ICollection<string> keyList)
        {
            return FindWhere(KeyConditionForCollections(keyList));
        }

        public virtual ICollection<TEntity> FindWhere(Expression<Func<TEntity, bool>> predicate)
        {
            return new List<TEntity>(QueryTemplate()
                .Where(predicate));
        }

        public virtual bool Any(Expression<Func<TEntity, bool>> predicate)
        {
            return QueryTemplate().Any(predicate);
        }

        /// <summary>
        /// Do not use Key() method, since this is designed to be invoked server side
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        protected virtual Expression<Func<TEntity, bool>> KeyCondition(string key)
        {
            return t => t.AutoGeneratedKey.Equals(key);
        }

        /// <summary>
        /// Do not use Key() method, since this is designed to be invoked server side
        /// </summary>
        /// <param name="collectionAppIds"></param>
        /// <returns></returns>
        protected virtual Expression<Func<TEntity, bool>> KeyConditionForCollections(ICollection<string> collectionAppIds)
        {
            return e => collectionAppIds.Contains(e.AutoGeneratedKey);
        }

        protected virtual IQueryable<TEntity> QueryTemplate()
        {
            return Context.Set<TEntity>();
        }

        protected virtual void CreateKey(TEntity entity)
        {
            if (entity is IAutoGeneratedKey entityWithAutoGeneratedId)
            {
                entityWithAutoGeneratedId.AutoGeneratedKey = Guid.NewGuid().ToString();
            }
        }

        protected virtual void BeforeUpdateEntity(TEntity entity)
        {
            Context.Entry(entity).State = EntityState.Modified;
        }

        private void SaveChanges()
        {
            Context.SaveChanges();
        }
    }
}
