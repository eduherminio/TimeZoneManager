using TimeZoneManager.Model;
using Microsoft.EntityFrameworkCore;

namespace TimeZoneManager.Orm
{
    public class DatabaseContext : DbContext
    {
        #region DbSet

        public DbSet<Permission> Permission { get; set; }

        public DbSet<Role> Role { get; set; }

        public DbSet<User> User { get; set; }

        public DbSet<PermissionInRole> PermissionInRole { get; set; }

        public DbSet<RoleInUser> RoleInUser { get; set; }

        public DbSet<TimeZoneManager.Model.TimeZone> TimeZone { get; set; }

        #endregion

        public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options)
        {
            Database.EnsureCreated();
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            CreateUserModel(modelBuilder);
            CreateRoleModel(modelBuilder);
            CreatePermissionModel(modelBuilder);
            CreateTimeZoneModel(modelBuilder);

            base.OnModelCreating(modelBuilder);
        }

        private static void CreateUserModel(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>()
                .HasIndex(e => e.AutoGeneratedKey).IsUnique();

            modelBuilder.Entity<User>()
                .HasIndex(e => e.Username).IsUnique();
        }

        private static void CreateRoleModel(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Role>()
                .HasIndex(e => e.AutoGeneratedKey).IsUnique();

            modelBuilder.Entity<Role>()
                .HasIndex(e => e.Name).IsUnique();

            modelBuilder.Entity<RoleInUser>()
                .HasKey(e => new { e.UserId, e.RoleId });

            modelBuilder.Entity<RoleInUser>()
                .HasOne(pt => pt.Role)
                .WithMany("RoleInUsers")
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<RoleInUser>()
                .HasOne(pt => pt.User)
                .WithMany("RoleInUsers");
        }

        private static void CreatePermissionModel(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Permission>()
                .HasIndex(e => e.AutoGeneratedKey).IsUnique();

            modelBuilder.Entity<Permission>()
                .HasIndex(e => e.Name).IsUnique();

            modelBuilder.Entity<PermissionInRole>()
               .HasKey(e => new { e.RoleId, e.PermissionId });

            modelBuilder.Entity<PermissionInRole>()
                .HasOne(pt => pt.Permission)
                .WithMany("PermissionInRoles")
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<PermissionInRole>()
                .HasOne(pt => pt.Role)
                .WithMany("PermissionInRoles");
        }

        private void CreateTimeZoneModel(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TimeZone>()
                .HasIndex(e => e.AutoGeneratedKey).IsUnique();

            modelBuilder.Entity<TimeZone>()
                .HasIndex(e => new { e.Name, e.UserId }).IsUnique();

            modelBuilder.Entity<TimeZone>()
                .HasOne(u => u.User)
                .WithMany(u => u.TimeZones)
                .HasForeignKey(u => u.UserId)
                .OnDelete(DeleteBehavior.Restrict);
        }
    }
}
