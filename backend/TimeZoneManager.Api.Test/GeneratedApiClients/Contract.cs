//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace TimeZoneManager.Api.Test.GeneratedApiClients
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IDefinitionsClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Constants> IndexAsync();
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        Constants Index();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Constants> IndexAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ILoginClient
    {
        /// <summary>Login</summary>
        /// <param name="password">Encrypted password</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> IndexAsync(string username, string password);
    
        /// <summary>Login</summary>
        /// <param name="password">Encrypted password</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        string Index(string username, string password);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Login</summary>
        /// <param name="password">Encrypted password</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> IndexAsync(string username, string password, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Renew authentication (required to be logged in)</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RenewTokenAsync();
    
        /// <summary>Renew authentication (required to be logged in)</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        string RenewToken();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Renew authentication (required to be logged in)</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RenewTokenAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IRoleClient
    {
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleDto>> LoadAllAsync();
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Collections.Generic.ICollection<RoleDto> LoadAll();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleDto>> LoadAllAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ITimeZoneClient
    {
        /// <summary>Creates a TimeZone</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeZoneDto> CreateAsync(TimeZoneDto user);
    
        /// <summary>Creates a TimeZone</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TimeZoneDto Create(TimeZoneDto user);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a TimeZone</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeZoneDto> CreateAsync(TimeZoneDto user, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Loads all TimeZones</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeZoneDto>> LoadAllAsync();
    
        /// <summary>Loads all TimeZones</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Collections.Generic.ICollection<TimeZoneDto> LoadAll();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Loads all TimeZones</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeZoneDto>> LoadAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a TimeZone</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeZoneDto> UpdateAsync(TimeZoneDto dto);
    
        /// <summary>Updates a TimeZone</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        TimeZoneDto Update(TimeZoneDto dto);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a TimeZone</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeZoneDto> UpdateAsync(TimeZoneDto dto, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Finds TimeZones that match a given name</summary>
        /// <param name="id">TimeZone name</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeZoneDto>> FindByNameAsync(string id);
    
        /// <summary>Finds TimeZones that match a given name</summary>
        /// <param name="id">TimeZone name</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Collections.Generic.ICollection<TimeZoneDto> FindByName(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Finds TimeZones that match a given name</summary>
        /// <param name="id">TimeZone name</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeZoneDto>> FindByNameAsync(string id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a TimeZone</summary>
        /// <param name="id">TimeZone key</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string id);
    
        /// <summary>Deletes a TimeZone</summary>
        /// <param name="id">TimeZone key</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        void Delete(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a TimeZone</summary>
        /// <param name="id">TimeZone key</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IUserClient
    {
        /// <summary>Allows the registration of a new user</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> RegisterAsync(FullUserDto user);
    
        /// <summary>Allows the registration of a new user</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        UserDto Register(FullUserDto user);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows the registration of a new user</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> RegisterAsync(FullUserDto user, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> CreateAsync(FullUserDto user);
    
        /// <summary>Creates a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        UserDto Create(FullUserDto user);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> CreateAsync(FullUserDto user, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Loads all Users</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDto>> LoadAllAsync();
    
        /// <summary>Loads all Users</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Collections.Generic.ICollection<UserDto> LoadAll();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Loads all Users</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDto>> LoadAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> UpdateAsync(UserDto dto);
    
        /// <summary>Updates a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        UserDto Update(UserDto dto);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> UpdateAsync(UserDto dto, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Loads a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> LoadAsync(string id);
    
        /// <summary>Loads a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        UserDto Load(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Loads a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDto> LoadAsync(string id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string id);
    
        /// <summary>Deletes a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        void Delete(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a User</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Finds Users that match a given name</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDto>> FindByNameAsync(string id);
    
        /// <summary>Finds Users that match a given name</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Collections.Generic.ICollection<UserDto> FindByName(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Finds Users that match a given name</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDto>> FindByNameAsync(string id, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Constants : System.ComponentModel.INotifyPropertyChanged
    {
        private PermissionName _permission;
        private RoleName _role;
        private JwtTokenPayload _payload;
        private CustomClaimTypesName _claims;
    
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PermissionName Permission
        {
            get { return _permission; }
            set 
            {
                if (_permission != value)
                {
                    _permission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleName Role
        {
            get { return _role; }
            set 
            {
                if (_role != value)
                {
                    _role = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JwtTokenPayload Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("claims", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomClaimTypesName Claims
        {
            get { return _claims; }
            set 
            {
                if (_claims != value)
                {
                    _claims = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PermissionName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PermissionCreate")]
        PermissionCreate = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PermissionRead")]
        PermissionRead = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleCreate")]
        RoleCreate = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleRead")]
        RoleRead = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleUpdate")]
        RoleUpdate = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleDelete")]
        RoleDelete = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserCreate")]
        UserCreate = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserRead")]
        UserRead = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserUpdate")]
        UserUpdate = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserDelete")]
        UserDelete = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TimeZoneCreate")]
        TimeZoneCreate = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TimeZoneRead")]
        TimeZoneRead = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TimeZoneUpdate")]
        TimeZoneUpdate = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TimeZoneDelete")]
        TimeZoneDelete = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TimeZoneAdmin")]
        TimeZoneAdmin = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RoleName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserManager")]
        UserManager = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Admin")]
        Admin = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class JwtTokenPayload : System.ComponentModel.INotifyPropertyChanged
    {
        private string _username;
        private System.Collections.Generic.ICollection<string> _permissions = new System.Collections.ObjectModel.Collection<string>();
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Permissions
        {
            get { return _permissions; }
            set 
            {
                if (_permissions != value)
                {
                    _permissions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CustomClaimTypesName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"prms")]
        Prms = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RoleDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _description;
        private string _key;
        private System.Collections.Generic.ICollection<PermissionDto> _permissions;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionDto> Permissions
        {
            get { return _permissions; }
            set 
            {
                if (_permissions != value)
                {
                    _permissions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PermissionDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _description;
        private string _key;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TimeZoneDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _cityName;
        private double _gmtDifferenceInHours;
        private string _key;
        private string _ownerUsername;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CityName
        {
            get { return _cityName; }
            set 
            {
                if (_cityName != value)
                {
                    _cityName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("gmtDifferenceInHours", Required = Newtonsoft.Json.Required.Always)]
        public double GmtDifferenceInHours
        {
            get { return _gmtDifferenceInHours; }
            set 
            {
                if (_gmtDifferenceInHours != value)
                {
                    _gmtDifferenceInHours = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ownerUsername", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerUsername
        {
            get { return _ownerUsername; }
            set 
            {
                if (_ownerUsername != value)
                {
                    _ownerUsername = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _username;
        private string _key;
        private System.Collections.Generic.ICollection<RoleDto> _roles;
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Username
        {
            get { return _username; }
            set 
            {
                if (_username != value)
                {
                    _username = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoleDto> Roles
        {
            get { return _roles; }
            set 
            {
                if (_roles != value)
                {
                    _roles = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FullUserDto : UserDto, System.ComponentModel.INotifyPropertyChanged
    {
        private string _password;
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108